/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EarthPatchService } from "../earthPatch.service";
import { EarthPatchCreateInput } from "./EarthPatchCreateInput";
import { EarthPatch } from "./EarthPatch";
import { EarthPatchFindManyArgs } from "./EarthPatchFindManyArgs";
import { EarthPatchWhereUniqueInput } from "./EarthPatchWhereUniqueInput";
import { EarthPatchUpdateInput } from "./EarthPatchUpdateInput";

export class EarthPatchControllerBase {
  constructor(protected readonly service: EarthPatchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EarthPatch })
  async createEarthPatch(
    @common.Body() data: EarthPatchCreateInput
  ): Promise<EarthPatch> {
    return await this.service.createEarthPatch({
      data: data,
      select: {
        createdAt: true,
        id: true,
        positionX: true,
        positionY: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EarthPatch] })
  @ApiNestedQuery(EarthPatchFindManyArgs)
  async earthPatches(@common.Req() request: Request): Promise<EarthPatch[]> {
    const args = plainToClass(EarthPatchFindManyArgs, request.query);
    return this.service.earthPatches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        positionX: true,
        positionY: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EarthPatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async earthPatch(
    @common.Param() params: EarthPatchWhereUniqueInput
  ): Promise<EarthPatch | null> {
    const result = await this.service.earthPatch({
      where: params,
      select: {
        createdAt: true,
        id: true,
        positionX: true,
        positionY: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EarthPatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEarthPatch(
    @common.Param() params: EarthPatchWhereUniqueInput,
    @common.Body() data: EarthPatchUpdateInput
  ): Promise<EarthPatch | null> {
    try {
      return await this.service.updateEarthPatch({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          positionX: true,
          positionY: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EarthPatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEarthPatch(
    @common.Param() params: EarthPatchWhereUniqueInput
  ): Promise<EarthPatch | null> {
    try {
      return await this.service.deleteEarthPatch({
        where: params,
        select: {
          createdAt: true,
          id: true,
          positionX: true,
          positionY: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
