/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EarthPatch } from "./EarthPatch";
import { EarthPatchCountArgs } from "./EarthPatchCountArgs";
import { EarthPatchFindManyArgs } from "./EarthPatchFindManyArgs";
import { EarthPatchFindUniqueArgs } from "./EarthPatchFindUniqueArgs";
import { CreateEarthPatchArgs } from "./CreateEarthPatchArgs";
import { UpdateEarthPatchArgs } from "./UpdateEarthPatchArgs";
import { DeleteEarthPatchArgs } from "./DeleteEarthPatchArgs";
import { EarthPatchService } from "../earthPatch.service";
@graphql.Resolver(() => EarthPatch)
export class EarthPatchResolverBase {
  constructor(protected readonly service: EarthPatchService) {}

  async _earthPatchesMeta(
    @graphql.Args() args: EarthPatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EarthPatch])
  async earthPatches(
    @graphql.Args() args: EarthPatchFindManyArgs
  ): Promise<EarthPatch[]> {
    return this.service.earthPatches(args);
  }

  @graphql.Query(() => EarthPatch, { nullable: true })
  async earthPatch(
    @graphql.Args() args: EarthPatchFindUniqueArgs
  ): Promise<EarthPatch | null> {
    const result = await this.service.earthPatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EarthPatch)
  async createEarthPatch(
    @graphql.Args() args: CreateEarthPatchArgs
  ): Promise<EarthPatch> {
    return await this.service.createEarthPatch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EarthPatch)
  async updateEarthPatch(
    @graphql.Args() args: UpdateEarthPatchArgs
  ): Promise<EarthPatch | null> {
    try {
      return await this.service.updateEarthPatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EarthPatch)
  async deleteEarthPatch(
    @graphql.Args() args: DeleteEarthPatchArgs
  ): Promise<EarthPatch | null> {
    try {
      return await this.service.deleteEarthPatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
