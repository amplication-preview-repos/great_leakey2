/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EarthPatch as PrismaEarthPatch } from "@prisma/client";

export class EarthPatchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EarthPatchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.earthPatch.count(args);
  }

  async earthPatches<T extends Prisma.EarthPatchFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EarthPatchFindManyArgs>
  ): Promise<PrismaEarthPatch[]> {
    return this.prisma.earthPatch.findMany<Prisma.EarthPatchFindManyArgs>(args);
  }
  async earthPatch<T extends Prisma.EarthPatchFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EarthPatchFindUniqueArgs>
  ): Promise<PrismaEarthPatch | null> {
    return this.prisma.earthPatch.findUnique(args);
  }
  async createEarthPatch<T extends Prisma.EarthPatchCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EarthPatchCreateArgs>
  ): Promise<PrismaEarthPatch> {
    return this.prisma.earthPatch.create<T>(args);
  }
  async updateEarthPatch<T extends Prisma.EarthPatchUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EarthPatchUpdateArgs>
  ): Promise<PrismaEarthPatch> {
    return this.prisma.earthPatch.update<T>(args);
  }
  async deleteEarthPatch<T extends Prisma.EarthPatchDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EarthPatchDeleteArgs>
  ): Promise<PrismaEarthPatch> {
    return this.prisma.earthPatch.delete(args);
  }
}
