/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Leaf as PrismaLeaf } from "@prisma/client";

export class LeafServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LeafCountArgs, "select">): Promise<number> {
    return this.prisma.leaf.count(args);
  }

  async leaves<T extends Prisma.LeafFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeafFindManyArgs>
  ): Promise<PrismaLeaf[]> {
    return this.prisma.leaf.findMany<Prisma.LeafFindManyArgs>(args);
  }
  async leaf<T extends Prisma.LeafFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeafFindUniqueArgs>
  ): Promise<PrismaLeaf | null> {
    return this.prisma.leaf.findUnique(args);
  }
  async createLeaf<T extends Prisma.LeafCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeafCreateArgs>
  ): Promise<PrismaLeaf> {
    return this.prisma.leaf.create<T>(args);
  }
  async updateLeaf<T extends Prisma.LeafUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeafUpdateArgs>
  ): Promise<PrismaLeaf> {
    return this.prisma.leaf.update<T>(args);
  }
  async deleteLeaf<T extends Prisma.LeafDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeafDeleteArgs>
  ): Promise<PrismaLeaf> {
    return this.prisma.leaf.delete(args);
  }
}
