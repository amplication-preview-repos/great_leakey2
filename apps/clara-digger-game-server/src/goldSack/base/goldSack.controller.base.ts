/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GoldSackService } from "../goldSack.service";
import { GoldSackCreateInput } from "./GoldSackCreateInput";
import { GoldSack } from "./GoldSack";
import { GoldSackFindManyArgs } from "./GoldSackFindManyArgs";
import { GoldSackWhereUniqueInput } from "./GoldSackWhereUniqueInput";
import { GoldSackUpdateInput } from "./GoldSackUpdateInput";

export class GoldSackControllerBase {
  constructor(protected readonly service: GoldSackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GoldSack })
  async createGoldSack(
    @common.Body() data: GoldSackCreateInput
  ): Promise<GoldSack> {
    return await this.service.createGoldSack({
      data: data,
      select: {
        createdAt: true,
        id: true,
        isOnGround: true,
        positionX: true,
        positionY: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GoldSack] })
  @ApiNestedQuery(GoldSackFindManyArgs)
  async goldSacks(@common.Req() request: Request): Promise<GoldSack[]> {
    const args = plainToClass(GoldSackFindManyArgs, request.query);
    return this.service.goldSacks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isOnGround: true,
        positionX: true,
        positionY: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GoldSack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async goldSack(
    @common.Param() params: GoldSackWhereUniqueInput
  ): Promise<GoldSack | null> {
    const result = await this.service.goldSack({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isOnGround: true,
        positionX: true,
        positionY: true,
        state: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GoldSack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGoldSack(
    @common.Param() params: GoldSackWhereUniqueInput,
    @common.Body() data: GoldSackUpdateInput
  ): Promise<GoldSack | null> {
    try {
      return await this.service.updateGoldSack({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          isOnGround: true,
          positionX: true,
          positionY: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GoldSack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGoldSack(
    @common.Param() params: GoldSackWhereUniqueInput
  ): Promise<GoldSack | null> {
    try {
      return await this.service.deleteGoldSack({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isOnGround: true,
          positionX: true,
          positionY: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
