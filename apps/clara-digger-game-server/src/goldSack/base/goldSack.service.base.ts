/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GoldSack as PrismaGoldSack } from "@prisma/client";

export class GoldSackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GoldSackCountArgs, "select">): Promise<number> {
    return this.prisma.goldSack.count(args);
  }

  async goldSacks<T extends Prisma.GoldSackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GoldSackFindManyArgs>
  ): Promise<PrismaGoldSack[]> {
    return this.prisma.goldSack.findMany<Prisma.GoldSackFindManyArgs>(args);
  }
  async goldSack<T extends Prisma.GoldSackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GoldSackFindUniqueArgs>
  ): Promise<PrismaGoldSack | null> {
    return this.prisma.goldSack.findUnique(args);
  }
  async createGoldSack<T extends Prisma.GoldSackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GoldSackCreateArgs>
  ): Promise<PrismaGoldSack> {
    return this.prisma.goldSack.create<T>(args);
  }
  async updateGoldSack<T extends Prisma.GoldSackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GoldSackUpdateArgs>
  ): Promise<PrismaGoldSack> {
    return this.prisma.goldSack.update<T>(args);
  }
  async deleteGoldSack<T extends Prisma.GoldSackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GoldSackDeleteArgs>
  ): Promise<PrismaGoldSack> {
    return this.prisma.goldSack.delete(args);
  }
}
