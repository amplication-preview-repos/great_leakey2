/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GoldSack } from "./GoldSack";
import { GoldSackCountArgs } from "./GoldSackCountArgs";
import { GoldSackFindManyArgs } from "./GoldSackFindManyArgs";
import { GoldSackFindUniqueArgs } from "./GoldSackFindUniqueArgs";
import { CreateGoldSackArgs } from "./CreateGoldSackArgs";
import { UpdateGoldSackArgs } from "./UpdateGoldSackArgs";
import { DeleteGoldSackArgs } from "./DeleteGoldSackArgs";
import { GoldSackService } from "../goldSack.service";
@graphql.Resolver(() => GoldSack)
export class GoldSackResolverBase {
  constructor(protected readonly service: GoldSackService) {}

  async _goldSacksMeta(
    @graphql.Args() args: GoldSackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoldSack])
  async goldSacks(
    @graphql.Args() args: GoldSackFindManyArgs
  ): Promise<GoldSack[]> {
    return this.service.goldSacks(args);
  }

  @graphql.Query(() => GoldSack, { nullable: true })
  async goldSack(
    @graphql.Args() args: GoldSackFindUniqueArgs
  ): Promise<GoldSack | null> {
    const result = await this.service.goldSack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoldSack)
  async createGoldSack(
    @graphql.Args() args: CreateGoldSackArgs
  ): Promise<GoldSack> {
    return await this.service.createGoldSack({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GoldSack)
  async updateGoldSack(
    @graphql.Args() args: UpdateGoldSackArgs
  ): Promise<GoldSack | null> {
    try {
      return await this.service.updateGoldSack({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoldSack)
  async deleteGoldSack(
    @graphql.Args() args: DeleteGoldSackArgs
  ): Promise<GoldSack | null> {
    try {
      return await this.service.deleteGoldSack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
