/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GhostService } from "../ghost.service";
import { GhostCreateInput } from "./GhostCreateInput";
import { Ghost } from "./Ghost";
import { GhostFindManyArgs } from "./GhostFindManyArgs";
import { GhostWhereUniqueInput } from "./GhostWhereUniqueInput";
import { GhostUpdateInput } from "./GhostUpdateInput";

export class GhostControllerBase {
  constructor(protected readonly service: GhostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ghost })
  async createGhost(@common.Body() data: GhostCreateInput): Promise<Ghost> {
    return await this.service.createGhost({
      data: data,
      select: {
        createdAt: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        speed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ghost] })
  @ApiNestedQuery(GhostFindManyArgs)
  async ghosts(@common.Req() request: Request): Promise<Ghost[]> {
    const args = plainToClass(GhostFindManyArgs, request.query);
    return this.service.ghosts({
      ...args,
      select: {
        createdAt: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        speed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ghost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ghost(
    @common.Param() params: GhostWhereUniqueInput
  ): Promise<Ghost | null> {
    const result = await this.service.ghost({
      where: params,
      select: {
        createdAt: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        speed: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ghost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGhost(
    @common.Param() params: GhostWhereUniqueInput,
    @common.Body() data: GhostUpdateInput
  ): Promise<Ghost | null> {
    try {
      return await this.service.updateGhost({
        where: params,
        data: data,
        select: {
          createdAt: true,
          direction: true,
          id: true,
          isDead: true,
          name: true,
          speed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ghost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGhost(
    @common.Param() params: GhostWhereUniqueInput
  ): Promise<Ghost | null> {
    try {
      return await this.service.deleteGhost({
        where: params,
        select: {
          createdAt: true,
          direction: true,
          id: true,
          isDead: true,
          name: true,
          speed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
