/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Clara } from "./Clara";
import { ClaraCountArgs } from "./ClaraCountArgs";
import { ClaraFindManyArgs } from "./ClaraFindManyArgs";
import { ClaraFindUniqueArgs } from "./ClaraFindUniqueArgs";
import { CreateClaraArgs } from "./CreateClaraArgs";
import { UpdateClaraArgs } from "./UpdateClaraArgs";
import { DeleteClaraArgs } from "./DeleteClaraArgs";
import { ClaraService } from "../clara.service";
@graphql.Resolver(() => Clara)
export class ClaraResolverBase {
  constructor(protected readonly service: ClaraService) {}

  async _clarasMeta(
    @graphql.Args() args: ClaraCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Clara])
  async claras(@graphql.Args() args: ClaraFindManyArgs): Promise<Clara[]> {
    return this.service.claras(args);
  }

  @graphql.Query(() => Clara, { nullable: true })
  async clara(
    @graphql.Args() args: ClaraFindUniqueArgs
  ): Promise<Clara | null> {
    const result = await this.service.clara(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Clara)
  async createClara(@graphql.Args() args: CreateClaraArgs): Promise<Clara> {
    return await this.service.createClara({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Clara)
  async updateClara(
    @graphql.Args() args: UpdateClaraArgs
  ): Promise<Clara | null> {
    try {
      return await this.service.updateClara({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Clara)
  async deleteClara(
    @graphql.Args() args: DeleteClaraArgs
  ): Promise<Clara | null> {
    try {
      return await this.service.deleteClara(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
