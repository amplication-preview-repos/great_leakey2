/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClaraService } from "../clara.service";
import { ClaraCreateInput } from "./ClaraCreateInput";
import { Clara } from "./Clara";
import { ClaraFindManyArgs } from "./ClaraFindManyArgs";
import { ClaraWhereUniqueInput } from "./ClaraWhereUniqueInput";
import { ClaraUpdateInput } from "./ClaraUpdateInput";

export class ClaraControllerBase {
  constructor(protected readonly service: ClaraService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Clara })
  async createClara(@common.Body() data: ClaraCreateInput): Promise<Clara> {
    return await this.service.createClara({
      data: data,
      select: {
        createdAt: true,
        currentLevel: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Clara] })
  @ApiNestedQuery(ClaraFindManyArgs)
  async claras(@common.Req() request: Request): Promise<Clara[]> {
    const args = plainToClass(ClaraFindManyArgs, request.query);
    return this.service.claras({
      ...args,
      select: {
        createdAt: true,
        currentLevel: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Clara })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clara(
    @common.Param() params: ClaraWhereUniqueInput
  ): Promise<Clara | null> {
    const result = await this.service.clara({
      where: params,
      select: {
        createdAt: true,
        currentLevel: true,
        direction: true,
        id: true,
        isDead: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Clara })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClara(
    @common.Param() params: ClaraWhereUniqueInput,
    @common.Body() data: ClaraUpdateInput
  ): Promise<Clara | null> {
    try {
      return await this.service.updateClara({
        where: params,
        data: data,
        select: {
          createdAt: true,
          currentLevel: true,
          direction: true,
          id: true,
          isDead: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Clara })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClara(
    @common.Param() params: ClaraWhereUniqueInput
  ): Promise<Clara | null> {
    try {
      return await this.service.deleteClara({
        where: params,
        select: {
          createdAt: true,
          currentLevel: true,
          direction: true,
          id: true,
          isDead: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
