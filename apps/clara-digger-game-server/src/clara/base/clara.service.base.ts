/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Clara as PrismaClara } from "@prisma/client";

export class ClaraServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClaraCountArgs, "select">): Promise<number> {
    return this.prisma.clara.count(args);
  }

  async claras<T extends Prisma.ClaraFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaraFindManyArgs>
  ): Promise<PrismaClara[]> {
    return this.prisma.clara.findMany<Prisma.ClaraFindManyArgs>(args);
  }
  async clara<T extends Prisma.ClaraFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaraFindUniqueArgs>
  ): Promise<PrismaClara | null> {
    return this.prisma.clara.findUnique(args);
  }
  async createClara<T extends Prisma.ClaraCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaraCreateArgs>
  ): Promise<PrismaClara> {
    return this.prisma.clara.create<T>(args);
  }
  async updateClara<T extends Prisma.ClaraUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaraUpdateArgs>
  ): Promise<PrismaClara> {
    return this.prisma.clara.update<T>(args);
  }
  async deleteClara<T extends Prisma.ClaraDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaraDeleteArgs>
  ): Promise<PrismaClara> {
    return this.prisma.clara.delete(args);
  }
}
